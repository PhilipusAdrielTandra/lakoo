require('dotenv').config()
const express = require('express')
const cors = require('cors');
const app = express()
const fs = require('fs')
const mysql = require("mysql");
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken')
const multer = require('multer');
const path = require('path');
const mongoose = require('mongoose')
const productSchema = require('./model.js')

const port = 8081
app.use(express.json())
app.use(cors());


const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb');
const uri = "mongodb+srv://lakoo:m11qtMGGNQfipd61@cluster0.v8z4dqx.mongodb.net/?retryWrites=true&w=majority";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
}
});

async function run() {
try {
    // Connect the client to the server    (optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
} finally {
    // Ensures that the client will close when you finish/error
    // await client.close();
}
}
run().catch(console.dir);


// ------------ SERVICES ------------
const db = client.db("lakoo");

var storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads')
    },
    filename: (req, file, cb) => {
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + Date.now() + ext);
    }
});
 
var upload = multer({ storage: storage });

app.get('/', (req, res) => {
    res.send("YO WHATS POPPING ITS ME MR BACKEND")
})

app.get('/users', async (req, res) => {
    try {
        const users = await db.collection("users").find({}).toArray();
        res.json(users);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.post('/users', async (req, res) => {
    const { username, password, address, number, firstname, lastname } = req.body;
    const hash = await bcrypt.hash(password, 10);

    try {
        await db.collection("users").insertOne({ username, password: hash, address, number, firstname, lastname});
        res.json({ success: true });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Error registering user' });
    }
});

app.delete('/users/:userId', authenticateToken, async (req, res) => {
    const userIdToDelete = req.params.userId;

    try {
        // Check if the authenticated user has the privilege to delete users (admin check)
        const authenticatedUser = await db.collection("users").findOne({ _id: new ObjectId(req.user.userId) });
        if (authenticatedUser) {
            // Delete the user by their ID
            const result = await db.collection("users").deleteOne({ _id: new ObjectId(userIdToDelete) });

            if (result.deletedCount === 1) {
                res.json({ success: true, message: 'User deleted successfully' });
            } else {
                res.status(404).json({ error: 'User not found' });
            }
        } 
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


app.post('/users/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const user = await db.collection("users").findOne({ username });

        if (user) {
            const passwordMatch = await bcrypt.compare(password, user.password);

            if (passwordMatch) {
                const token = jwt.sign({ userId: user._id }, process.env.ACCESS_TOKEN_SECRET);
                res.json({ success: true, message: 'Login successful', token });
            } else {
                res.status(401).json({ error: 'Invalid password' });
            }
        } else {
            res.status(404).json({ error: 'User not found' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.post('/products', authenticateToken, upload.single('image'), async (req, res) => {
    console.log('Request Body:', req.body);
    console.log('Request File:', req.file);

    const { name, description, category, brand, condition, style, price } = req.body;
    const img = req.file.filename; // Use the filename generated by Multer for the image field
    const userId = new ObjectId(req.user.userId); // Get the user ID from the authenticated user

    if (!req.file) {
        return res.status(400).json({ error: 'No file uploaded' });
    }

    try {
        const result = await db.collection("products").insertOne({
            name,
            description,
            category,
            brand,
            condition,
            style,
            price,
            img, // Save the filename in the 'img' field
            userId, // Associate the product with the authenticated user
        });

        if (result.acknowledged && result.acknowledged === true) {
            console.log('Product inserted successfully');
            res.json({ success: true, message: 'Product inserted successfully' });
        } else {
            console.error('Failed to insert product', result);
            res.status(500).json({ error: 'Failed to insert product' });
        }
    } catch (err) {
        console.error('Error inserting product:', err);
        res.status(500).json({ error: 'Internal Server Error', details: err.message });
    }
});


app.get('/products', async (req, res) => {
    try {
        const products = await db.collection("products").find({}).toArray();
        res.json(products);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.get('/products/:productId', async (req, res) => {
    const productIdToFind = req.params.productId;

    try {
        const product = await db.collection("products").findOne({ _id: new ObjectId(productIdToFind) });

        if (product) {
            res.json(product);
        } else {
            res.status(404).json({ error: 'Product not found' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


app.delete('/products/:productId', authenticateToken, async (req, res) => {
    const productIdToDelete = req.params.productId;

    try {
        // Check if the authenticated user has the privilege to delete the product
        const authenticatedUser = await db.collection("users").findOne({ _id: new ObjectId(req.user.userId) });
        if (authenticatedUser) {
            // Delete the product by its ID and the associated user ID
            const result = await db.collection("products").deleteOne({ _id: new ObjectId(productIdToDelete), userId: new ObjectId(req.user.userId) });

            if (result.deletedCount === 1) {
                res.json({ success: true, message: 'Product deleted successfully' });
            } else {
                res.status(404).json({ error: 'Product not found or you do not have permission to delete it' });
            }
        } else {
            res.status(403).json({ error: 'Forbidden: You do not have permission to delete this product' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//-------------------- AUTHENTICATION STUFF -------------------- 
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split(' ')[1]  
    if (token == null) return res.status(401)
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
        if (err) return res.status(403)
        req.user = user
        next()
    })   
}

app.listen(port, () => {
    console.log(`Running on port ${port}`)
})